---- Working with Spring Data JPA -------


@RestController
@RequestMapping("/api/v1/products")
public class ProductController {

  private IProductService productService;

  @Autowired
  //@Qualifier("inMemory")
  public ProductController(IProductService productService) {
    System.out.println("ProductController constructor is called with service: "+ productService);
    this.productService = productService;
  }



package com.devgen.spring.service;

import com.devgen.spring.model.Category;
import com.devgen.spring.model.Product;
import java.util.List;

public interface IProductService {

  void add(Product product);

  Product getById(Long id);

  List<Product> getAll();

  void delete(Long id);

  List<Product> searchByCategory(Category category);

  List<Product> searchByProductName(String name);

  void updateProduct(Product newProduct);

  List<Product> searchByProductPriceRange(Double lowerPrice, Double higherPrice);
}


--------------------------


package com.devgen.spring.service;

import com.devgen.spring.exception.InvalidArgumentException;
import com.devgen.spring.exception.InvalidProductCategoryException;
import com.devgen.spring.exception.ProductNotFoundException;
import com.devgen.spring.model.Category;
import com.devgen.spring.model.Product;
import static com.devgen.spring.utils.Constant.INVALID_PRODUCT_CATEGORY_ERROR_MSG;
import static com.devgen.spring.utils.Constant.INVALID_PRODUCT_IDENTIFIER_ERROR_MSG;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.stereotype.Service;

@Service("inMemory")
//@Primary
public class InMemoryProductService implements IProductService {

  private final Map<Long, Product> products;
  private Long id;


  public InMemoryProductService() {
    System.out.println("InMemoryProductService constructor is called.");
    this.products = new HashMap<>();
    this.id = 1L;

    //initializeProducts();
  }



  public void add(Product product) {

    if (product.getCategory() == null) {
      throw new InvalidProductCategoryException(INVALID_PRODUCT_CATEGORY_ERROR_MSG);
    }

    product.setId(id);
    products.put(id, product);
    id++;
  }

  public Product getById(Long id) {
    Product prod = products.get(id);
    if (prod == null) {
      throw new ProductNotFoundException(INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }

    return prod;
  }

  public List<Product> getAll() {
    System.out.println("ProductService getAll() method is called.");
    return new ArrayList<>(products.values());
  }

  public void delete(Long id) {
    Product prod = products.remove(id);
    if (prod == null) {
      throw new ProductNotFoundException(INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }
  }

  public List<Product> searchByCategory(Category category) {

    List<Product> matchingProducts = new ArrayList<>();
    for (Product product : products.values()) {
      if (product.getCategory().equals(category)) {
        matchingProducts.add(product);
      }
    }
    return matchingProducts;
  }

  public List<Product> searchByProductName(String name) {
    if (name.isEmpty()) {
      throw new InvalidArgumentException("Product name cannot be empty.");
    }

    return products.values().stream()
        .filter(product -> isNameMatching(name, product)) //partial matching
        .toList();
  }

  private static boolean isNameMatching(String name, Product product) {
    return product.getName().toLowerCase().contains(name.toLowerCase());
  }

  public void updateProduct(Product newProduct) {
    Product existingProduct = products.get(newProduct.getId());
    if (existingProduct == null) {
      throw new ProductNotFoundException(INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }

    if (newProduct.getCategory() == null) {
      throw new InvalidProductCategoryException(INVALID_PRODUCT_CATEGORY_ERROR_MSG);
    }

    if (existingProduct != null) {
      existingProduct.setName(newProduct.getName());
      existingProduct.setPrice(newProduct.getPrice());
    }

  }

  public List<Product> searchByProductPriceRange(Double lowerPrice, Double higherPrice) {
    return products.values().stream()
        .filter(product -> isPriceRangeValid(lowerPrice, higherPrice, product))
        .sorted(Comparator.comparingDouble(Product::getPrice))
        .collect(Collectors.toList());
  }

  private boolean isPriceRangeValid(Double lowerPrice, Double higherPrice, Product product) {
    return product.getPrice() >= lowerPrice && product.getPrice() <= higherPrice;
  }
}

--------------------


package com.devgen.spring.service;

import com.devgen.spring.exception.InvalidProductCategoryException;
import com.devgen.spring.exception.ProductNotFoundException;
import com.devgen.spring.model.Category;
import com.devgen.spring.model.Product;
import com.devgen.spring.repository.ProductRepository;
import com.devgen.spring.utils.Constant;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;

@Service("database")
@Primary
public class DatabaseProductService implements IProductService {

  private ProductRepository productRepository;

  @Autowired
  public DatabaseProductService(ProductRepository productRepository) {
    System.out.println("DatabaseProductService constructor is called.");
    this.productRepository = productRepository;
  }

  @Override
  public void add(Product product) {
    // Add product to database
    productRepository.save(product);
  }

  @Override
  public Product getById(Long id) {
    Optional<Product> product = productRepository.findById(id);

    if(product.isPresent()) {
      return product.get();
    }else {
      throw new ProductNotFoundException(Constant.INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }

    //Optional is an placeholder for storing null value. It is used to represent a value which is either present or absent.

  }

  @Override
  public List<Product> getAll() {
   return  productRepository.findAll();
  }

  @Override
  public void delete(Long id) {
    Optional<Product> product = productRepository.findById(id);
    if(product.isPresent()) {
      productRepository.deleteById(id);
    }else {
      throw new ProductNotFoundException(Constant.INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }
  }

  @Override
  public List<Product> searchByCategory(Category category) {
    if (category == null) {
      throw new InvalidProductCategoryException(Constant.INVALID_PRODUCT_CATEGORY_ERROR_MSG);
    }
    return productRepository.findByCategory(category);
  }

  @Override
  public List<Product> searchByProductName(String name) {
    return productRepository.findByNameContainingIgnoreCase(name);
  }

  @Override
  public void updateProduct(Product newProduct) throws ProductNotFoundException{
    //If new product given without id, then it will create the new product
    //If the product with id is given, then it will update the product

    if (newProduct.getCategory() == null) {
      throw new InvalidProductCategoryException(Constant.INVALID_PRODUCT_CATEGORY_ERROR_MSG);
    }


    try {
      productRepository.save(newProduct);
    } catch(Exception e) {
      System.err.println(e);
      throw new ProductNotFoundException(Constant.INVALID_PRODUCT_IDENTIFIER_ERROR_MSG);
    }
  }

  @Override
  public List<Product> searchByProductPriceRange(Double lowerPrice, Double higherPrice) {
    return productRepository.findByPriceBetweenOrderByPriceDesc(lowerPrice, higherPrice);
  }
}

---------------------


package com.devgen.spring.repository;

import com.devgen.spring.model.Category;
import com.devgen.spring.model.Product;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

  List<Product> findByNameContainingIgnoreCase(String name);

  List<Product> findByPriceBetweenOrderByPriceDesc(double lowerPrice, double higherPrice);

  List<Product> findByCategory(Category category);
}

--------------


package com.devgen.spring.utils;

public interface Constant {
  String INVALID_PRODUCT_IDENTIFIER_ERROR_MSG = "Invalid product identifier is provided. Product not found.";
  String INVALID_PRODUCT_CATEGORY_ERROR_MSG = "Invalid product category.";
}

------------


package com.devgen.spring.listener;

import com.devgen.spring.exception.InvalidProductCategoryException;
import com.devgen.spring.model.Category;
import com.devgen.spring.model.Product;
import com.devgen.spring.service.IProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

@Component
public class ApplicationEventListener {

  @Autowired
  private IProductService productService;

  @EventListener(ApplicationReadyEvent.class)
  public void handleEvent(ApplicationEvent event) {
    System.out.println("Received application event: " + event);
    initializeProducts();

  }

  private void initializeProducts() {
    try {
      productService.add(new Product("Laptop", Category.ELECTRONICS, 1000.00));
      productService.add(new Product("T-Shirt", Category.CLOTHING, 20.00));
      productService.add(new Product("Book", Category.BOOKS, 10.00));
      productService.add(new Product("Table", Category.FURNITURE, 200.00));
      productService.add(new Product("Chair", Category.FURNITURE, 100.00));
      productService.add(new Product("Mobile", Category.ELECTRONICS, 500.00));
      productService.add(new Product("Jeans", Category.CLOTHING, 50.00));
      productService.add(new Product("Shirt", Category.CLOTHING, 30.00));
      productService.add(new Product("Pen", Category.BOOKS, 2.00));
      productService.add(new Product("Pencil", Category.BOOKS, 1.00));
      productService.add(new Product("Sofa", Category.FURNITURE, 300.00));
      productService.add(new Product("Bed", Category.FURNITURE, 400.00));
      productService.add(new Product("Mouse", Category.ELECTRONICS, 10.00));
      productService.add(new Product("Keyboard", Category.ELECTRONICS, 20.00));
      productService.add(new Product("Earphones", Category.ELECTRONICS, 30.00));
      productService.add(new Product("Headphones", Category.ELECTRONICS, 40.00));
      productService.add(new Product("Sunglasses", Category.CLOTHING, 100.00));
      productService.add(new Product("Watch", Category.CLOTHING, 200.00));
      productService.add(new Product("Belt", Category.CLOTHING, 50.00));
      productService.add(new Product("Glasses", Category.CLOTHING, 150.00));
      productService.add(new Product("Novel", Category.BOOKS, 15.00));
      productService.add(new Product("Dictionary", Category.BOOKS, 20.00));
      productService.add(new Product("Encyclopedia", Category.BOOKS, 50.00));
    } catch (InvalidProductCategoryException e) {
      System.err.println(e.getMessage());
    }
  }

}


-----------------------

